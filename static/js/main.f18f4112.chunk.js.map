{"version":3,"sources":["Canvas.js","ImageUpload.js","Output.js","App.js","index.js"],"names":["Canvas","setCanvas","canvasWidth","canvasHeight","onChange","canvas","drawing","hideGrid","brushRadius","Imageupload","image","setImage","useState","imageName","setImageName","padding","flexDir","wrap","justifyContent","alignItems","w","maxW","type","id","name","accept","style","display","event","URL","createObjectURL","target","files","mx","onClick","undefined","leftIcon","Delete","colorScheme","document","getElementById","click","Attachment","Output","imageInput","canvasInput","worker","createWorker","logger","m","console","log","scanInput","a","load","loadLanguage","initialize","recognize","text","data","setOutput","setLoading","terminate","output","loading","App","direction","minH","width","height","border","margin","src","ImageUpload","ReactDOM","render"],"mappings":"2MAsBeA,EAjBA,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAKhB,OACI,cAAC,IAAD,CACEC,YAAY,QACZC,aAAa,QACbC,SAPe,SAAAC,GACnBJ,EAAUI,EAAOA,OAAOC,UAOpBC,UAAU,EACVC,YAAa,K,6CCuCNC,MAlDf,YAA2C,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EACNC,mBAAS,IADH,mBACjCC,EADiC,KACtBC,EADsB,KAMxC,OACE,eAAC,IAAD,CACEC,QAAQ,OACRC,QAAQ,MACRC,KAAK,OACLC,eAAe,SACfC,WAAW,SACXC,EAAE,OACFC,KAAK,QAPP,UASE,uBACEC,KAAK,OACLC,GAAG,YACHC,KAAK,MACLC,OAAO,UACPC,MAAO,CAAEC,QAAS,QAClBvB,SApBe,SAAAwB,GACnBjB,EAASkB,IAAIC,gBAAgBF,EAAMG,OAAOC,MAAM,KAChDlB,EAAac,EAAMG,OAAOC,MAAM,GAAGR,SAoBhCd,EACC,eAAC,IAAD,WACE,cAAC,IAAD,CAAMuB,GAAG,OAAT,SAAiBpB,IACjB,cAAC,IAAD,CACEqB,QAAS,kBAAMvB,OAASwB,IACxBC,SAAU,cAACC,EAAA,EAAD,IACVC,YAAY,MAHd,6BASF,cAAC,IAAD,CACEJ,QAAS,WACPK,SAASC,eAAe,aAAaC,SAEvCL,SAAU,cAACM,EAAA,EAAD,IACVJ,YAAY,OALd,8B,iCCmDOK,MApFf,YAA2C,IAA1BC,EAAyB,EAAzBA,WAAWC,EAAc,EAAdA,YACpBC,EAASC,uBAAa,CAC1BC,OAAQ,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,MAGrBG,EAAS,uCAAG,8BAAAC,EAAA,sEACVP,EAAOQ,OADG,uBAEVR,EAAOS,aAAa,OAFV,uBAGVT,EAAOU,WAAW,OAHR,uBAIeV,EAAOW,UAAP,OAAiBb,QAAjB,IAAiBA,IAAcC,EAAa,OAJ3D,uBAIDa,EAJC,EAIRC,KAAOD,KACfE,EAAUF,GACVG,GAAW,GANK,UAOVf,EAAOgB,YAPG,4CAAH,qDALyB,EAgBZlD,qBAhBY,mBAgBjCmD,EAhBiC,KAgBzBH,EAhByB,OAiBVhD,oBAAS,GAjBC,mBAiBjCoD,EAjBiC,KAiBxBH,EAjBwB,KAmBxC,YAAkB1B,GAAdS,QAA0CT,GAAfU,EACtB,yBAGTO,IACIY,EACK,8CAUP,cAAC,IAAD,UACE,cAAC,IAAD,UACGD,QCNME,MAjCf,WAAgB,IAAD,EACarD,qBADb,mBACNF,EADM,KACCC,EADD,OAEeC,qBAFf,mBAENP,EAFM,KAEEJ,EAFF,KAGb,OACE,eAAC,IAAD,CACEiE,UAAU,SACVhD,eAAe,aACfE,EAAE,OACF+C,KAAK,QACLhD,WAAW,SALb,UAOA,cAAC,IAAD,CACEiD,MAAM,QACNC,OAAO,QACPC,OAAO,iBACPC,OAAO,MACPrD,eAAe,SACfC,WAAW,SANb,SAQGT,EACC,cAAC,IAAD,UACE,cAAC,IAAD,CAAO8D,IAAK9D,MAGd,cAAC,EAAD,CAAQT,UAAWA,MAGrB,cAACwE,EAAD,CAAa/D,MAAOA,EAAOC,SAAUA,IACrC,cAAC,EAAD,CAAQiC,WAAYlC,EAAOmC,YAAaxC,QC7B9CqE,IAASC,OACP,eAAC,aAAD,WACE,cAAC,IAAD,IACA,cAAC,IAAD,UACE,cAAC,EAAD,SAGJpC,SAASC,eAAe,W","file":"static/js/main.f18f4112.chunk.js","sourcesContent":["// file to contain the canvas for DRAWING\r\nimport { Flex } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport CanvasDraw from 'react-canvas-draw';\r\n\r\nconst Canvas = ({ setCanvas }) => {\r\n  // canvas with drawing is canvas with z-index 11\r\n  const handleChange = canvas => {\r\n    setCanvas(canvas.canvas.drawing);\r\n  };\r\n  return (\r\n      <CanvasDraw\r\n        canvasWidth=\"800px\"\r\n        canvasHeight=\"600px\"\r\n        onChange={handleChange}\r\n        hideGrid={true}\r\n        brushRadius={4}\r\n      />\r\n    // </Flex>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","// file to contain the stuff to uplaod the image\r\nimport React, { useState } from 'react';\r\nimport { HStack,Text, Flex, Input, Box, Button } from '@chakra-ui/react';\r\n\r\nimport { AttachmentIcon, DeleteIcon } from '@chakra-ui/icons';\r\nfunction Imageupload({ image, setImage }) {\r\n  const [imageName, setImageName] = useState('');\r\n  const handleChange = event => {\r\n    setImage(URL.createObjectURL(event.target.files[0]));\r\n    setImageName(event.target.files[0].name);\r\n  };\r\n  return (\r\n    <Flex\r\n      padding=\"10px\"\r\n      flexDir=\"row\"\r\n      wrap=\"wrap\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      w=\"100%\"\r\n      maxW=\"800px\"\r\n    >\r\n      <input\r\n        type=\"file\"\r\n        id=\"imgUpload\"\r\n        name=\"img\"\r\n        accept=\"image/*\"\r\n        style={{ display: 'none' }}\r\n        onChange={handleChange}\r\n      />\r\n      {image ? (\r\n        <HStack>\r\n          <Text mx=\"40px\">{imageName}</Text>\r\n          <Button\r\n            onClick={() => setImage(undefined)}\r\n            leftIcon={<DeleteIcon />}\r\n            colorScheme=\"red\"\r\n          >\r\n            Remove Image\r\n          </Button>\r\n        </HStack>\r\n      ) : (\r\n        <Button\r\n          onClick={() => {\r\n            document.getElementById('imgUpload').click();\r\n          }}\r\n          leftIcon={<AttachmentIcon />}\r\n          colorScheme=\"teal\"\r\n        >\r\n          Upload Image\r\n        </Button>\r\n      )}\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Imageupload;\r\n","// file to contain the output text\r\nimport React from 'react';\r\nimport { createWorker } from 'tesseract.js';\r\nimport { useState } from 'react';\r\nimport { Flex,Text } from '@chakra-ui/react';\r\n\r\n\r\n\r\nfunction Output({imageInput,canvasInput}) {\r\n  const worker = createWorker({\r\n    logger: m => console.log(m),\r\n  });\r\n  \r\n  const scanInput = async () => {\r\n    await worker.load();\r\n    await worker.loadLanguage('eng');\r\n    await worker.initialize('eng'); \r\n    const { data: {text} } = await worker.recognize(imageInput ?? canvasInput, 'eng');\r\n    setOutput(text);\r\n    setLoading(false);\r\n    await worker.terminate(); \r\n  }\r\n  \r\n  // switch it up depending on canvas/image\r\n  const [output, setOutput] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  if (imageInput == undefined && canvasInput == undefined) {\r\n    return <div></div>;\r\n  }\r\n\r\n  scanInput(); // \r\n  if (loading) {\r\n    return <div>Scanning...</div>;\r\n  }  \r\n  \r\n  \r\n  // .then( data : {text} ) => { // Look at comment below for data properties\r\n  //   console.log(data)\r\n  //   setOutput(data.text);\r\n  // });\r\n\r\n  return(\r\n    <Flex>\r\n      <Text>\r\n        {output}\r\n      </Text>\r\n    </Flex>\r\n  )\r\n}\r\n\r\n\r\n\r\n// {\r\n//   text: \"Mild Splendour of the various-vested Nig ...\"\r\n//   hocr: \"<div class='ocr_page' id= ...\"\r\n//   tsv: \"1 1 0 0 0 0 0 0 1486 ...\"\r\n//   box: null\r\n//   unlv: null\r\n//   osd: null\r\n//   confidence: 90\r\n//   blocks: [{...}]\r\n//   psm: \"SINGLE_BLOCK\"\r\n//   oem: \"DEFAULT\"\r\n//   version: \"4.0.0-825-g887c\"\r\n//   paragraphs: [{...}]\r\n//   lines: (8) [{...}, ...]\r\n//   words: (58) [{...}, {...}, ...]\r\n//   symbols: (295) [{...}, {...}, ...]\r\n// }\r\n// If you want to see the complete result object, visit the URL https://omed.hplar.ch/webocr/basic.html and open the developer console.\r\n// detect.data holds information about detected script and orientation and the corresopnding confidence score\r\n// {\r\n//   tesseract_script_id: 1\r\n//   script: \"Latin\"\r\n//   script_confidence: 39.58333969116211\r\n//   orientation_degrees: 0\r\n//   orientation_confidence: 29.793731689453125\r\n// }\r\n\r\n  // const worker = Tesseract.createWorker({\r\n  //   logger: m => console.log(m)\r\n  // });\r\n\r\n  // Tesseract.setLogging(true); // needed to check OCR progress\r\n\r\n  // await worker.load();\r\n  // await worker.loadLanguage('eng');\r\n  // await worker.initialize('eng');\r\n\r\n\r\n\r\nexport default Output;\r\n","import React, { useState } from 'react';\nimport { Flex, Image } from '@chakra-ui/react';\nimport Canvas from './Canvas.js';\nimport ImageUpload from './ImageUpload.js';\nimport Output from './Output.js';\n\nfunction App() {\n  const [image, setImage] = useState();\n  const [canvas, setCanvas] = useState();\n  return (\n    <Flex\n      direction=\"column\"\n      justifyContent=\"flex-start\"\n      w=\"100%\"\n      minH=\"100vh\"\n      alignItems=\"center\"\n    >\n    <Flex\n      width=\"810px\"\n      height=\"610px\"\n      border=\"solid 2px grey\"\n      margin=\"5px\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n    >\n      {image ? (\n        <Flex>\n          <Image src={image} />\n        </Flex>\n      ) : (\n        <Canvas setCanvas={setCanvas} />\n      )}\n      </Flex>\n      <ImageUpload image={image} setImage={setImage} />\n      <Output imageInput={image} canvasInput={canvas} />\n    </Flex>\n  );\n}\n\nexport default App;\n\n// \"homepage\":\"https://warwickhackajhl.github.io/wahack270221/\",\n","import { ColorModeScript,ChakraProvider } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}
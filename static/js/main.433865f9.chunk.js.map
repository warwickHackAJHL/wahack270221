{"version":3,"sources":["Canvas.js","ImageUpload.js","Output.js","App.js","index.js"],"names":["Canvas","setCanvas","count","setCount","canvasRef","useRef","w","h","canvasWidth","canvasHeight","onChange","canvas","drawing","hideGrid","brushRadius","ref","position","bottom","left","colorScheme","onClick","current","clear","undo","Imageupload","image","setImage","useState","imageName","setImageName","padding","flexDir","wrap","justifyContent","alignItems","maxW","type","id","name","accept","style","display","event","URL","createObjectURL","target","files","mx","undefined","leftIcon","Delete","document","getElementById","click","Attachment","initWorker","setWorker","a","tempWorker","createWorker","logger","m","console","log","load","loadLanguage","initialize","Output","imageInput","canvasInput","worker","output","setOutput","loading","setLoading","useEffect","recognize","then","result","text","data","width","height","mb","value","e","inputValue","App","direction","minH","border","margin","src","alt","ImageUpload","ReactDOM","render"],"mappings":"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","file":"static/js/main.433865f9.chunk.js","sourcesContent":["// file to contain the canvas for DRAWING\r\nimport { Button, Box, Flex } from '@chakra-ui/react';\r\nimport React, { useRef } from 'react';\r\nimport CanvasDraw from 'react-canvas-draw';\r\n\r\nconst Canvas = ({ setCanvas, count, setCount }) => {\r\n  // canvas with drawing is canvas with z-index 11\r\n  const canvasRef = useRef(null);\r\n  const handleChange = canvas => {\r\n    setCanvas(canvas.canvas.drawing);\r\n    setCount(count + 1);\r\n  };\r\n  return (\r\n    <Box w=\"100%\" h=\"100%\">\r\n      <CanvasDraw\r\n        canvasWidth=\"800px\"\r\n        canvasHeight=\"600px\"\r\n        onChange={handleChange}\r\n        hideGrid={true}\r\n        brushRadius={4}\r\n        ref={canvasRef}\r\n      />\r\n      <Button\r\n        position=\"relative\"\r\n        bottom=\"-15px\"\r\n        left=\"5px\"\r\n        colorScheme=\"red\"\r\n        onClick={() => {\r\n          if (canvasRef?.current) {\r\n            canvasRef.current.clear();\r\n          }\r\n        }}\r\n      >\r\n        Clear\r\n      </Button>\r\n      <Button\r\n        position=\"relative\"\r\n        bottom=\"-15px\"\r\n        left=\"40px\"\r\n        colorScheme=\"red\"\r\n        onClick={() => {\r\n          if (canvasRef?.current) {\r\n            canvasRef.current.undo();\r\n          }\r\n        }}\r\n      >\r\n        Undo\r\n      </Button>\r\n    </Box>\r\n    // </Flex>\r\n  );\r\n};\r\n\r\nexport default Canvas;\r\n","// file to contain the stuff to uplaod the image\r\nimport React, { useState } from 'react';\r\nimport { HStack,Text, Flex, Input, Box, Button } from '@chakra-ui/react';\r\n\r\nimport { AttachmentIcon, DeleteIcon } from '@chakra-ui/icons';\r\nfunction Imageupload({ image, setImage }) {\r\n  const [imageName, setImageName] = useState('');\r\n  const handleChange = event => {\r\n    setImage(URL.createObjectURL(event.target.files[0]));\r\n    setImageName(event.target.files[0].name);\r\n  };\r\n  return (\r\n    <Flex\r\n      padding=\"10px\"\r\n      flexDir=\"row\"\r\n      wrap=\"wrap\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      w=\"100%\"\r\n      maxW=\"800px\"\r\n    >\r\n      <input\r\n        type=\"file\"\r\n        id=\"imgUpload\"\r\n        name=\"img\"\r\n        accept=\"image/*\"\r\n        style={{ display: 'none' }}\r\n        onChange={handleChange}\r\n      />\r\n      {image ? (\r\n        <HStack>\r\n          <Text mx=\"40px\">{imageName}</Text>\r\n          <Button\r\n            onClick={() => setImage(undefined)}\r\n            leftIcon={<DeleteIcon />}\r\n            colorScheme=\"red\"\r\n          >\r\n            Remove Image\r\n          </Button>\r\n        </HStack>\r\n      ) : (\r\n        <Button\r\n          onClick={() => {\r\n            document.getElementById('imgUpload').click();\r\n          }}\r\n          leftIcon={<AttachmentIcon />}\r\n          colorScheme=\"teal\"\r\n        >\r\n          Upload Image\r\n        </Button>\r\n      )}\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default Imageupload;\r\n","// file to contain the output text\r\nimport React from 'react';\r\nimport { createWorker } from 'tesseract.js';\r\nimport { useState, useEffect } from 'react';\r\nimport { Flex, Text,Textarea } from '@chakra-ui/react';\r\n\r\nconst initWorker = async setWorker => {\r\n  let tempWorker = createWorker({\r\n    logger: m => console.log(m),\r\n  });\r\n  await tempWorker.load();\r\n  await tempWorker.loadLanguage();\r\n  await tempWorker.initialize('eng');\r\n  setWorker(tempWorker);\r\n};\r\n\r\nfunction Output({ imageInput, canvasInput, count }) {\r\n  const [worker, setWorker] = useState();\r\n  const [output, setOutput] = useState();\r\n  const [loading, setLoading] = useState(true);\r\n  useEffect(() => {\r\n    initWorker(setWorker);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (worker) {\r\n      worker.recognize(imageInput ?? canvasInput).then(result => {\r\n        const text = result?.data?.text;\r\n        if (text) {\r\n          setOutput(text);\r\n          setLoading(false);\r\n        }\r\n      });\r\n    }\r\n  }, [worker, imageInput, canvasInput, count]);\r\n\r\n  if (loading) {\r\n    return <div>Scanning...</div>;\r\n  }\r\n  const inputChange = (e) => {\r\n    const inputValue = e.target.value;\r\n    setOutput(inputValue);\r\n  }\r\n\r\n  return(\r\n    <>\r\n      <Textarea \r\n        maxW=\"600px\"\r\n        width=\"100%\" \r\n        height=\"300px\" \r\n        mb=\"20px\" \r\n        value={output}\r\n        onChange={inputChange}\r\n      />\r\n    </>\r\n  )\r\n}\r\nexport default Output;\r\n","import React, { useState } from 'react';\r\nimport { Flex, Image } from '@chakra-ui/react';\r\nimport Canvas from './Canvas.js';\r\nimport ImageUpload from './ImageUpload.js';\r\nimport Output from './Output.js';\r\n\r\nfunction App() {\r\n  const [count, setCount] = useState(0);\r\n  const [image, setImage] = useState();\r\n  const [canvas, setCanvas] = useState();\r\n  return (\r\n    <Flex\r\n      direction=\"column\"\r\n      justifyContent=\"flex-start\"\r\n      w=\"100%\"\r\n      minH=\"100vh\"\r\n      alignItems=\"center\"\r\n    >\r\n      <Flex\r\n        width=\"810px\"\r\n        height=\"610px\"\r\n        border=\"solid 2px grey\"\r\n        margin=\"5px\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        {image ? (\r\n          <Flex>\r\n            <img src={image} alt=\"Uploaded image\" />\r\n          </Flex>\r\n        ) : (\r\n          <Canvas setCanvas={setCanvas} count={count} setCount={setCount} />\r\n        )}\r\n      </Flex>\r\n      <ImageUpload image={image} setImage={setImage} />\r\n      <Output imageInput={image} canvasInput={canvas} count={count} />\r\n    </Flex>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// \"homepage\":\"https://warwickhackajhl.github.io/wahack270221/\",\r\n","import { ColorModeScript,ChakraProvider } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}